对于block的简单的介绍https://developer.apple.com/library/ios/featuredarticles/Short_Practical_Guide_Blocks/index.html#//apple_ref/doc/uid/TP40009758块提供了强大的C语言特性是Cocoa application developments的一部分。类似于"closures"和"lambdas"你可以在很多语言中发现，如Ruby,Python,和Lisp.内容：为什么使用块系统Api中的块块和并发1.为什么使用块块是一个工作单元的封装。具体上来说是一段代码。可以在任何时候执行。实际上是一个方便的匿名函数可以当成函数的参数传递或者可以作为方法或函数的返回值。块有一个参数列表并且可能推断或声明一个返回类型。你也可以将blocks分配到一个变量中，然后调用它，就像调用函数一样。标示符^作为blocks的语法标志。例如下面的代码声明一个块有两个int参数并返回一个int返回值。它提供了参数列表在第二个^,并将实现代码放在一个{}号中，并将它赋给一个Mutiply变量。int (^Multiply)(int, int) = ^(int num1, int num2) {    return num1 * num2;};int result = Multiply(7, 4); // Result is 28.作为方法或函数的参数，块是回调的一种形式，可以被认为委托的一种形式。通过传入一个块代码，调用函数可以自定义方法的行为。当调用的时候，方法执行一部分工作，并在合适的时候 calls back to the invoking code—via the block，来请求额外的信息或获得application-specific behavior。 以Notification为例：  - (void)viewDidLoad {   [super viewDidLoad];    [[NSNotificationCenter defaultCenter] addObserver:self        selector:@selector(keyboardWillShow:)        name:UIKeyboardWillShowNotification object:nil];} - (void)keyboardWillShow:(NSNotification *)notification {    // Notification-handling code goes here.}使用addObserverForName:object:queue:usingBlock: 方法，你可以在方法调用中合并通知处理代码。- (void)viewDidLoad {    [super viewDidLoad];    [[NSNotificationCenter defaultCenter] addObserverForName:UIKeyboardWillShowNotification         object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *notif) {             // Notification-handling code goes here.     }];}一个更大的好处块是可以共享局部范围内的数据。 例如有一个方法，你在方法中定义了一个块，这个块可以访问这个方法的局部变量和方法的参数(包括栈参数)和全局变量。包括实体变量。访问默认是只读的。但是如果你使用__block 来修饰一个变量，你可以在block中改变他的值。即使在这个包含块的函数结束了并且他的local scope被销毁了。局部变量作为块的一部分还是会可以被块引用，直到块结束。2.系统Api中的块我们在系统API中使用了很多的块，表现在增加了需要使用块的API.